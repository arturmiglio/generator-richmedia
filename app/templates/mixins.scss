/* 	
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------

	MIXINS

---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
*/


// ------------------------------------------------------------------------------------------------------------
// 	POSITIONING
// ------------------------------------------------------------------------------------------------------------

//**
// Private Mixin: _set-position
// Set the Position for the Position Mixins
//
// @mixin       _set-position
// @param       $position {list} One Value = top, Two Value = top left, Four Values = top right bottom left (t = zero position) can be in px or %
// @usage:      +_set-position($position)
//                  ...
//**
@mixin _set-position($position) {
  $targets: null !default;
  $count: null !default;

  $count: length($position);

  @if $count == 1 {
    $targets: top;
  }

  @if $count == 2 {
    $targets: top left;
  }

  @if $count == 4 {
    $targets: top right bottom left;
  }

  @for $i from 1 through $count {
    @if nth($position, $i) == t {
      #{nth($targets, $i)}: 0;
    }
    @else {
      @if nth($position, $i) == 0 {
        #{nth($targets, $i)}: nth($position, $i);
      }
      @else if nth($position, $i) != null {
        @if nth($position, $i) != null and nth($position, $i) > 0 or nth($position, $i) < 0 {
          @if unitless(nth($position, $i)) {
            #{nth($targets, $i)}: nth($position, $i) + 0px;
          }
          @else {
            #{nth($targets, $i)}: nth($position, $i);
          }
        }
      }
    }
  }
}

//**
// Mixin: relative
// Relative Positioning Elements
//
// @mixin       relative
// @param       $pos {list} One Value = top, Two Value = top left, Four Values = top right bottom left (t = zero position) can be in px or %
// @usage:      +relative(1)
//                  ...
//**
@mixin relative($pos: 0) {
  position: relative;

  @include _set-position($pos);
}

//**
// Mixin: absolute
// Absolute Positioning Elements
//
// @mixin       absolute
// @param       $pos {list} One Value = top, Two Value = top left, Four Values = top right bottom left (t = zero position) can be in px or %
// @usage:      +absolute(10 10%)
//                  ...
//**
@mixin absolute($pos: null) {
  position: absolute;

  @include _set-position($pos);
}

//**
// Mixin: fixed
// Fixed Positioning Elements
//
// @mixin       fixed
// @param       $pos {list} One Value = top, Two Value = top left, Four Values = top right bottom left (t = zero position) can be in px or %
// @usage:      +fixed(10)
//                  ...
//**
@mixin fixed($pos: 0 0 0 0) {
  position: fixed;

  @include _set-position($pos);
}

//**
// Mixin: static
// Reset CSS Position Methods
//
// @mixin       static
// @usage:      +static
//                  ...
//**
@mixin static {
  position: static;
  left: inherit;
  right: inherit;
  top: inherit;
  bottom: inherit;
}


// ------------------------------------------------------------------------------------------------------------
// 	CENTERING
// ------------------------------------------------------------------------------------------------------------

	// Helper mixing for centering horizontally and vertically
	// ----
	// @param [string] $direction: both
	// ----
	// 1. Output position absolute
	// 2. If no argument supplied then output top and left 50% and translate in both directions -50%
	// 4. If direction is horizontal output left 50% and translate X -50%
	// 3. If direction is vertical output top 50% and translate Y -50%


@mixin center($direction: both) {
	position: absolute;

	@if is-valid-direction($direction) {
		@if ($direction == both) {
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
		} @else if ($direction == horizontal) {
			left: 50%;
			transform: translateX(-50%);
		} @else if ($direction == vertical) {
			top: 50%;
			transform: translateY(-50%);
		}
	} @else {
		@warn "Invalid value `#{$direction}` for direction. Must be both, horizontal, vertical or empty";
	}
}

// Function checking if $direction is a valid direction
// ---
// @param [literal] $direction: direction to test
// ---
// @return [bool]

@function is-valid-direction($direction) {
	@return (type-of($direction) == "string")  
				and ($direction == both or $direction == horizontal or $direction == vertical);
}


// ------------------------------------------------------------------------------------------------------------
// 	PSEUDO ELEMENTS 'RESET'
// ------------------------------------------------------------------------------------------------------------
	
	// Helper mixin to enable ::pseudos to be used for layouting
	// About: http://engageinteractive.co.uk/blog/top-10-scss-mixins

@mixin pseudo($display: block, $pos: absolute, $content: '') {
    content: $content;
    display: $display;
    position: $pos;
}


// ------------------------------------------------------------------------------------------------------------
// 	FORCE HARDWARE ACCELERATION
// ------------------------------------------------------------------------------------------------------------

	// Helper mixin to render using hardware acceleration
	// About: http://engageinteractive.co.uk/blog/top-10-scss-mixins

@mixin hardware($backface: true, $perspective: 1000) {
    @if $backface {
        backface-visibility: hidden;
    }
    perspective: $perspective;
}
